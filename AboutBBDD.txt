

### **Distribución de las bases de datos**
1. **SQL Server (Relacional con datos estructurados y transacciones robustas)**
   - **Usuarios**: Información de usuarios como nombre, email, contraseña (hash), dirección, roles, y demás datos personales.
   - **Operaciones de intercambio**: Datos relacionados con las operaciones entre usuarios (pactos, estados de transacción).
   - **Smart Contracts**: Almacenamiento de contratos vinculados a las operaciones.
   - **GiftCards**: Detalles de cada tarjeta generada (monto, ID único, fechas).

   **Motivo**: SQL Server maneja bien transacciones críticas y asegura consistencia en datos complejos como operaciones y contratos.

---

2. **Oracle (Ideal para datos históricos y reportes analíticos)**
   - **Historial de transacciones**: Registro de todas las operaciones completadas o canceladas, incluyendo los detalles de usuarios, montos y fechas.
   - **Logs del sistema**: Información para auditorías y reportes.
   - **Estadísticas del sistema**: Datos agregados como volumen de operaciones por día/semana, montos totales gestionados, y usuarios activos.

   **Motivo**: Oracle se destaca en procesamiento analítico y consultas complejas, ideal para reportes históricos y de negocio.

---

3. **MySQL (Ligero y flexible, ideal para datos maestros)**
   - **Locales adheridos**: Detalles de locales y comercios asociados (nombre, dirección, categorías).
   - **Peticiones de regalo**: Datos sobre qué solicita cada usuario (descripción, categoría, precio estimado).

   **Motivo**: MySQL es eficiente para datos estructurados no muy complejos, como listas de locales y solicitudes.

---

4. **MongoDB (NoSQL para datos semiestructurados y documentos)**
   - **Chats**: Mensajes enviados entre usuarios, estructurados en documentos JSON (conversaciones completas con remitente, destinatario, timestamp).
   - **Notificaciones**: Notificaciones de eventos importantes (petición aceptada, transacción completada).

   **Motivo**: MongoDB es excelente para datos jerárquicos como chats y notificaciones, y su esquema flexible permite cambios futuros.

---

5. **PostgreSQL (Relacional con soporte para JSON y extensibilidad)**
   - **Fotos de perfil**: Almacena metadatos sobre las fotos de los usuarios (nombre de archivo, tamaño, URL de almacenamiento).
   - **Metadatos generales**: Información adicional no crítica que puede estar en formato JSON, como preferencias de usuario o configuraciones personalizadas.

   **Motivo**: PostgreSQL combina bien datos relacionales y semiestructurados, lo que lo hace ideal para gestionar datos complementarios como metadatos.

---

### **Cómo interactúan las bases de datos**
La interacción entre las bases puede lograrse mediante los siguientes enfoques:
1. **Interacciones asincrónicas**: 
   - Usa mensajes a través de una cola (como RabbitMQ o Azure Service Bus) para notificar eventos entre microservicios.
   - Ejemplo: Cuando una transacción se completa en SQL Server, el microservicio asociado envía un mensaje que el servicio de chat (MongoDB) usa para notificar a los usuarios.

2. **APIs específicas para cada servicio**:
   - Cada microservicio que gestiona una base de datos expone una API para consultar datos o realizar operaciones relacionadas.
   - Ejemplo: El microservicio de usuarios consulta SQL Server, mientras el de notificaciones accede a MongoDB.

---

### **Cosas a considerar en la implementación**
1. **Coherencia eventual vs. fuerte:**
   - La coherencia fuerte es necesaria para operaciones críticas como las transacciones y los smart contracts (SQL Server).
   - Para elementos menos críticos como notificaciones o chats, la coherencia eventual es suficiente (MongoDB).

2. **Backups y restauración:**
   - Configura estrategias de backup adecuadas para cada base. Por ejemplo, un backup más frecuente para SQL Server debido a las transacciones críticas.

3. **Seguridad:**
   - Usa encriptación para datos sensibles como contraseñas, claves de smart contracts, y mensajes críticos.
   - Implementa autenticación y autorización en cada microservicio.

4. **Métricas de rendimiento:**
   - Monitorea cada base de datos para asegurarte de que el rendimiento sea adecuado (especialmente si PostgreSQL almacena archivos grandes como imágenes).

---

### **Flujo típico en la aplicación**
1. **Juan crea una cuenta:**
   - Los datos de Juan se guardan en SQL Server.

2. **Juan publica una petición:**
   - La petición se guarda en MySQL.

3. **Agustín responde a la petición:**
   - Se inicia un chat, almacenado en MongoDB.

4. **Se pacta un intercambio:**
   - Los datos del pacto y el smart contract se guardan en SQL Server.

5. **La transacción se completa:**
   - Se genera una GiftCard, almacenada en SQL Server.
   - El historial de la transacción se guarda en Oracle para reportes futuros.

6. **Notificaciones:**
   - MongoDB registra notificaciones para ambos usuarios.

---

Esta distribución muestra cómo aprovechar las fortalezas de cada base de datos mientras mantienes la escalabilidad y modularidad de la solución. Si deseas ajustar o expandir algún aspecto,
¡puedo ayudarte!



### 1) **Clarificación sobre PostgreSQL**

#### a) **Metadatos:**
Metadatos son "datos sobre datos". En este caso, los metadatos de las fotos de perfil incluirían información descriptiva sobre cada archivo, como:
- **Nombre del archivo:** "foto_perfil_juan.jpg"
- **Tamaño:** 256 KB
- **Extensión:** .jpg
- **Ruta de almacenamiento:** `/media/uploads/usuarios/123/`
- **Fecha de carga:** 2024-12-24
- **ID del usuario asociado:** 123

**Nota:** Estos datos no son la imagen en sí, sino información que permite localizarla, validar su tipo y manejarla en la aplicación.

#### b) **¿Guardar los bytes de la imagen o solo la información?**
Hay dos enfoques principales:
1. **Guardar solo la información en PostgreSQL y almacenar el archivo en el servidor (o un sistema de almacenamiento como AWS S3, Azure Blob Storage, o Google Cloud Storage):**
   - Ventajas:
     - Mejor rendimiento al evitar que la base de datos crezca mucho.
     - Escalabilidad al usar servicios de almacenamiento.
   - Desventajas:
     - Necesitas configurar un servicio externo para almacenar los archivos.

2. **Guardar los bytes de la imagen directamente en PostgreSQL (en una columna tipo `bytea` o usando extensiones como `pg_largeobject`):**
   - Ventajas:
     - Todo queda centralizado en la base de datos.
     - Más sencillo para respaldos (se respalda todo junto).
   - Desventajas:
     - Aumenta el tamaño de la base de datos rápidamente.
     - Posible impacto en el rendimiento si tienes muchas imágenes grandes.

**Recomendación:** 
En tu caso, como es un proyecto para práctica, puedes experimentar guardando solo los metadatos en PostgreSQL y dejando las imágenes físicas en carpetas locales en el servidor. Esto te 
permitirá simular un esquema más realista sin complicarte demasiado.

---

### 2) **Métricas de rendimiento**

#### a) **¿Qué son las métricas de rendimiento?**
Las métricas de rendimiento son datos que te ayudan a medir cómo se comportan tus sistemas. En el contexto de bases de datos y aplicaciones, puedes medir:
- **Latencia:** Tiempo que toma una operación (lectura/escritura).
- **Tasa de consultas por segundo (QPS):** Cuántas consultas se manejan en un período.
- **Uso de CPU/memoria:** Recursos consumidos por el servidor de la base de datos.
- **Índices fragmentados:** Impacto en la velocidad de consultas.
- **Conexiones activas:** Cuántas conexiones a la base de datos hay abiertas en un momento dado.

---

#### b) **Herramientas para monitoreo de bases de datos**
Existen muchas herramientas para monitorear bases de datos y sistemas. Algunas populares incluyen:

- **Para bases de datos:**
  1. **pgAdmin (PostgreSQL):** Tiene estadísticas básicas.
  2. **SQL Server Management Studio (SQL Server):** Incluye herramientas como el Query Store para monitorear rendimiento.
  3. **Oracle Enterprise Manager (Oracle):** Proporciona análisis detallado.
  4. **Percona Monitoring and Management (MySQL, MongoDB, PostgreSQL):** Plataforma especializada en monitoreo.
  5. **Grafana + Prometheus:** Usados juntos, permiten crear dashboards personalizados para monitorear cualquier base de datos.

- **Para monitoreo general:**
  1. **New Relic:** Servicio SaaS para monitoreo completo de aplicaciones y bases de datos.
  2. **Datadog:** Similar a New Relic, permite monitorear rendimiento a nivel de infraestructura, bases de datos y aplicaciones.
  3. **Elastic Stack (ELK):** Muy flexible para monitoreo, logs y análisis de datos.

---

#### c) **Cómo empezar con métricas**
1. **Entender qué necesitas medir:**
   - Identifica las operaciones críticas en tu aplicación. Ejemplo: latencia en transacciones, tiempo de respuesta del chat.

2. **Configurar herramientas básicas:**
   - Para PostgreSQL: Instala y configura `pg_stat_statements`, una extensión para monitoreo de consultas.
   - Para SQL Server: Familiarízate con el Query Store y Performance Monitor.

3. **Aprender sobre sistemas de monitoreo:**
   - Explora herramientas como Grafana y Prometheus, que son gratuitas y ampliamente usadas.
   - Usa dashboards preconfigurados para métricas de bases de datos.

4. **Probar y optimizar:**
   - Genera una carga en la base de datos (usando scripts o herramientas como Apache JMeter).
   - Recolecta datos y busca cuellos de botella.

#### Recursos para aprender más:
- **Cursos en línea:**
  - [Udemy: Monitoring and Tuning Databases](https://www.udemy.com/) (varias opciones para cada tipo de base de datos).
- **Documentación oficial:**
  - PostgreSQL: [pg_stat_statements](https://www.postgresql.org/docs/current/pgstatstatements.html).
  - SQL Server: [Query Store](https://learn.microsoft.com/en-us/sql/relational-databases/performance/monitoring-performance-by-using-the-query-store).
- **Blogs y tutoriales:**
  - **Grafana Labs Blog:** Tutoriales de configuración y ejemplos prácticos.
  - **Percona Blog:** Contenido técnico sobre monitoreo y optimización de bases de datos.

---

¿Te gustaría ayuda para configurar una de estas herramientas en tu proyecto?


3) Clarificacion sobre MongoDB:

Si por ejemplo Usuarios y dentro una propiedad de navegacion ICollection Compras,  las propiedades de navegación como ICollection<Compras> no funcionan automáticamente
si los datos están en otra base de datos (como MongoDB u Oracle). Eso solo funciona en EF con entidades mapeadas a la misma base de datos y contexto.

 🔹 A. SQL Server / PostgreSQL / MySQL
    (Ej: Usuarios y Compras en la misma base relacional)

    ✅ Sí funciona directamente con propiedades de navegación (ICollection<Compras>), siempre que estén en el mismo DbContext y haya claves foráneas bien definidas.

🔹 B. MongoDB
    ❌ No funciona con propiedades de navegación automáticas.

    MongoDB es NoSQL, sin joins.

    EF no puede mapearlo.

    Usás el MongoDB C# Driver con consultas manuales.

    🧠 Solución: hacés la agregación de datos manual en tu servicio, como te mostré antes.

 🔹 B. Oracle
    ✅ o ❌ Depende.

    Si usás EF Core con el provider de Oracle (como Oracle.EntityFrameworkCore), sí podés tener navegación, pero dentro de esa misma base y contexto.

    Si tenés entidades en bases separadas (SQL Server y Oracle), no se pueden relacionar directamente con propiedades de navegación en EF.

    📌 Podés tener navegación dentro de cada base si usás un DbContext por base.

        🔹 Conclusión
    Las propiedades de navegación (ICollection<T>, T) solo funcionan dentro del mismo DbContext y base relacional.

    Si estás usando múltiples bases (ej: SQL Server + MongoDB + Oracle), entonces debés usar:

    🔸 Un DbContext por base relacional

    🔸 Repositorios separados por tipo de base

    🔸 Agregación de datos a mano en los servicios de aplicación